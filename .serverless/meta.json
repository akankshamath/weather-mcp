{
  "/Users/akankshamathur/weather-cloudfare/serverless.yml": {
    "versionFramework": "4.17.1",
    "servicePath": "/Users/akankshamathur/weather-cloudfare/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "mcp-weather-server",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "ap-southeast-1",
        "memorySize": 256,
        "timeout": 30,
        "environment": {
          "OPENWEATHER_API_KEY": "<REDACTED>"
        },
        "httpApi": {
          "cors": true
        },
        "deploymentBucket": "mcp-weather-deployments-1750852395",
        "stage": "dev",
        "versionFunctions": true,
        "deploymentBucketObject": {
          "name": "mcp-weather-deployments-1750852395"
        },
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "McpServerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/mcp-weather-server-dev-mcpServer"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "mcp-weather-server",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mcp-weather-server-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mcp-weather-server-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "mcp-weather-server",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "McpServerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "mcp-weather-deployments-1750852395",
                  "S3Key": "serverless/mcp-weather-server/dev/1750869613976-2025-06-25T16:40:13.976Z/mcp-weather-server.zip"
                },
                "Handler": "src/index.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "mcp-weather-server-dev-mcpServer",
                "MemorySize": 256,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "OPENWEATHER_API_KEY": "<REDACTED>",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "McpServerLogGroup"
              ]
            },
            "McpServerLambdaVersionOJTtFJ5p6MmiSGquWrx9VZy4K8MwzbfbVoGPti1X40": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "McpServerLambdaFunction"
                },
                "CodeSha256": "zDQZ/o0//sNHwFORwsWDOf4CdBrRX87rvJs4geBknvA="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-mcp-weather-server",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "AllowMethods": [
                    "OPTIONS",
                    "GET",
                    "POST",
                    "PUT",
                    "PATCH",
                    "HEAD",
                    "DELETE"
                  ],
                  "AllowOrigins": [
                    "*"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "McpServerLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "McpServerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationMcpServer": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "McpServerLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteAnyProxyVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "ANY /{proxy+}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationMcpServer"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationMcpServer"
            },
            "HttpApiRouteAny": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "ANY /",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationMcpServer"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationMcpServer"
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "mcp-weather-deployments-1750852395",
              "Export": {
                "Name": "sls-mcp-weather-server-dev-ServerlessDeploymentBucketName"
              }
            },
            "McpServerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "McpServerLambdaVersionOJTtFJ5p6MmiSGquWrx9VZy4K8MwzbfbVoGPti1X40"
              },
              "Export": {
                "Name": "sls-mcp-weather-server-dev-McpServerLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-mcp-weather-server-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-mcp-weather-server-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "build": {
        "esbuild": {
          "bundle": true,
          "minify": true,
          "target": "node18",
          "external": [
            "@aws-sdk/*"
          ]
        }
      },
      "functions": {
        "mcpServer": {
          "handler": "src/index.handler",
          "events": [
            {
              "httpApi": {
                "path": "/{proxy+}",
                "method": "ANY"
              },
              "resolvedMethod": "ANY",
              "resolvedPath": "/{proxy+}"
            },
            {
              "httpApi": {
                "path": "/",
                "method": "ANY"
              },
              "resolvedMethod": "ANY",
              "resolvedPath": "/"
            }
          ],
          "name": "mcp-weather-server-dev-mcpServer",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 256,
          "timeout": 30,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "McpServerLambdaVersionOJTtFJ5p6MmiSGquWrx9VZy4K8MwzbfbVoGPti1X40"
        }
      },
      "resources": {
        "Resources": {},
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "ap-southeast-1",
      "memorySize": 256,
      "timeout": 30,
      "environment": {
        "OPENWEATHER_API_KEY": "<REDACTED>"
      },
      "httpApi": {
        "cors": true
      },
      "deploymentBucket": "mcp-weather-deployments-1750852395",
      "stage": "dev",
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "mcp-weather-deployments-1750852395"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "McpServerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/mcp-weather-server-dev-mcpServer"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "mcp-weather-server",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mcp-weather-server-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mcp-weather-server-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "mcp-weather-server",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "McpServerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "mcp-weather-deployments-1750852395",
                "S3Key": "serverless/mcp-weather-server/dev/1750869613976-2025-06-25T16:40:13.976Z/mcp-weather-server.zip"
              },
              "Handler": "src/index.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "mcp-weather-server-dev-mcpServer",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "OPENWEATHER_API_KEY": "<REDACTED>",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "McpServerLogGroup"
            ]
          },
          "McpServerLambdaVersionOJTtFJ5p6MmiSGquWrx9VZy4K8MwzbfbVoGPti1X40": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "McpServerLambdaFunction"
              },
              "CodeSha256": "zDQZ/o0//sNHwFORwsWDOf4CdBrRX87rvJs4geBknvA="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-mcp-weather-server",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "HEAD",
                  "DELETE"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "McpServerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "McpServerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationMcpServer": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "McpServerLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteAnyProxyVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "ANY /{proxy+}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationMcpServer"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationMcpServer"
          },
          "HttpApiRouteAny": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "ANY /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationMcpServer"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationMcpServer"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "mcp-weather-deployments-1750852395",
            "Export": {
              "Name": "sls-mcp-weather-server-dev-ServerlessDeploymentBucketName"
            }
          },
          "McpServerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "McpServerLambdaVersionOJTtFJ5p6MmiSGquWrx9VZy4K8MwzbfbVoGPti1X40"
            },
            "Export": {
              "Name": "sls-mcp-weather-server-dev-McpServerLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-mcp-weather-server-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-mcp-weather-server-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: mcp-weather-server\n\nprovider:\n  name: aws\n  runtime: nodejs18.x\n  region: ap-southeast-1\n  memorySize: 256\n  timeout: 30\n  environment:\n    OPENWEATHER_API_KEY: ${env:OPENWEATHER_API_KEY}\n  httpApi:\n    cors: true\n  deploymentBucket:\n    name: mcp-weather-deployments-1750852395\n\nbuild:\n  esbuild:\n    bundle: true\n    minify: true\n    target: node18\n    external:\n      - '@aws-sdk/*'\n\nfunctions:\n  mcpServer:\n    handler: src/index.handler\n    events:\n      - httpApi:\n          path: /{proxy+}\n          method: ANY\n      - httpApi:\n          path: /\n          method: ANY\n\nresources:\n  Resources:\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "65cfddba-cc13-4b4d-a555-325507af3364",
    "orgName": "akankshamath",
    "userId": "0FRXV3zzJV1B2vcm9B",
    "userName": "akankshamath",
    "serviceProviderAwsAccountId": "447646783424",
    "serviceProviderAwsCfStackName": "mcp-weather-server-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-southeast-1:447646783424:stack/mcp-weather-server-dev/247ea860-51bb-11f0-9930-02b052f6a547",
    "serviceProviderAwsCfStackCreated": "2025-06-25T11:54:26.947Z",
    "serviceProviderAwsCfStackUpdated": "2025-06-25T16:38:33.697Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "McpServerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-southeast-1:447646783424:function:mcp-weather-server-dev-mcpServer:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-mcp-weather-server-dev-McpServerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "ln4qfof0k1",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-mcp-weather-server-dev-HttpApiId"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "mcp-weather-deployments-1750852395",
        "ExportName": "sls-mcp-weather-server-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://ln4qfof0k1.execute-api.ap-southeast-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-mcp-weather-server-dev-HttpApiUrl"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "McpServerLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/mcp-weather-server-dev-mcpServer"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "mcp-weather-server",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mcp-weather-server-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mcp-weather-server-dev*:*:*"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "mcp-weather-server",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "McpServerLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "mcp-weather-deployments-1750852395",
              "S3Key": "serverless/mcp-weather-server/dev/1750869613976-2025-06-25T16:40:13.976Z/mcp-weather-server.zip"
            },
            "Handler": "src/index.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "mcp-weather-server-dev-mcpServer",
            "MemorySize": 256,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "OPENWEATHER_API_KEY": "<REDACTED>",
                "NODE_OPTIONS": "--enable-source-maps"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "McpServerLogGroup"
          ]
        },
        "McpServerLambdaVersionOJTtFJ5p6MmiSGquWrx9VZy4K8MwzbfbVoGPti1X40": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "McpServerLambdaFunction"
            },
            "CodeSha256": "zDQZ/o0//sNHwFORwsWDOf4CdBrRX87rvJs4geBknvA="
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-mcp-weather-server",
            "ProtocolType": "HTTP",
            "CorsConfiguration": {
              "AllowHeaders": [
                "Content-Type",
                "X-Amz-Date",
                "Authorization",
                "X-Api-Key",
                "X-Amz-Security-Token",
                "X-Amz-User-Agent",
                "X-Amzn-Trace-Id"
              ],
              "AllowMethods": [
                "OPTIONS",
                "GET",
                "POST",
                "PUT",
                "PATCH",
                "HEAD",
                "DELETE"
              ],
              "AllowOrigins": [
                "*"
              ]
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "McpServerLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "McpServerLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationMcpServer": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "McpServerLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteAnyProxyVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "ANY /{proxy+}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationMcpServer"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationMcpServer"
        },
        "HttpApiRouteAny": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "ANY /",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationMcpServer"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationMcpServer"
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "mcp-weather-deployments-1750852395",
          "Export": {
            "Name": "sls-mcp-weather-server-dev-ServerlessDeploymentBucketName"
          }
        },
        "McpServerLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "McpServerLambdaVersionOJTtFJ5p6MmiSGquWrx9VZy4K8MwzbfbVoGPti1X40"
          },
          "Export": {
            "Name": "sls-mcp-weather-server-dev-McpServerLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-mcp-weather-server-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-mcp-weather-server-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}